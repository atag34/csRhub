colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
results <- GetISIN(alias=company_names,key=key)
GetISIN <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 &
!is.null(jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]])){
names[["ISIN"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["ISIN"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(alias), " ", round(((length(data)/length(alias))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
results <- GetISIN(alias=company_names,key=key)
results
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/Industry?session_id=",key),
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/Industry?session_id=",key))
csrhub_keygen <- function(email,password) {
if(is.null(email)){
message("Missing Login Email")
}
else if(is.null(password)) {
message("Missing Password")
}
else{
key <- httr::POST("http://www.csrhub.com/api/v2/session/",
body=paste0("name=",email,"&password=",password))
if (is.null(httr::content(key, 'parsed')$session_id)){
message(httr::content(key, 'parsed')$error)
} else{
key <- httr::content(key, 'parsed')$session_id
return(key)
}
}
}
csrhub_keygen('ops@heron.org',"Heron100")
key <-csrhub_keygen('ops@heron.org',"Heron100")
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/Industry?session_id=",key))
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- new_handle() %>%
handle_setheaders("Content-Type" = "application/json") %>%
handle_setform(body = toJSON(iris))
pool <- new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- ifelse(is.null(fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,fromJSON(rawToChar(test[["content"]]))[["name"]])
names[["Ind_Alias"]] <- ifelse(is.null(fromJSON(rawToChar(test[["content"]]))[["alias"]][1]),NA,fromJSON(rawToChar(test[["content"]]))[["alias"]])
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(urls), " ", round(((length(data)/length(urls))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- multi_run(pool = pool)
print(out)
ind_nam_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df)
}
GetIndName("Apple_Inc",key=key)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
names[["Ind_Alias"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]])
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(urls), " ", round(((length(data)/length(urls))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df)
}
GetIndName("Apple_Inc",key=key)
source('~/.active-rstudio-document', echo=TRUE)
GetIndName("Apple_Inc",key=key)
library(dplyr)
GetIndName("Apple_Inc",key=key)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
names[["Ind_Alias"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]])
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(urls), " ", round(((length(data)/length(urls))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df)
}
GetIndName("Apple_Inc",key=key)
GetIndName("Apple-Inc",key=key)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
names[["Ind_Alias"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]])
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df)
}
GetIndName("Apple-Inc",key=key)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
names[["Ind_Alias"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]])
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(ind_nam_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,ind_name_df,by="url")
return(result_df)
}
GetIndName("Apple-Inc",key=key)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
names[["Ind_Alias"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]])
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(ind_nam_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,ind_nam_df,by="url")
return(result_df)
}
GetIndName("Apple-Inc",key=key)
GET(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/Industry?session_id=",key)
)
curl::GET(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/Industry?session_id=",key))
httr::GET(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/Industry?session_id=",key))
test <- httr::GET(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/Industry?session_id=",key))
jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]]
jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]]
names <- list()
names[['Name']] <- jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]]
names
names[['Ind_Allias']] <- jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]]
data <- names
ind_nam_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
View(ind_nam_df)
ind_nam_df <- bind_rows(data)
rm(data)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
names[["Ind_Alias"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]])
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- bind_rows(data)
colnames(ind_nam_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,ind_nam_df,by="url")
return(result_df)
}
GetIndName("Apple-Inc",key=key)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
names[["Ind_Alias"]] <- ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]])
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- bind_rows(data)
colnames(ind_nam_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,ind_nam_df,by="url")
return(result_df)
}
GetIndName("Apple-Inc",key=key)
ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]][1]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
ifelse(is.null(jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]]),NA,jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]])
jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]]
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]]
names[["Ind_Alias"]] <- jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]]
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- bind_rows(data)
colnames(ind_nam_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,ind_nam_df,by="url")
return(result_df)
}
GetIndName("Apple-Inc",key=key)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]]
names[["Ind_Alias"]] <- jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]]
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- bind_rows(data)
colnames(ind_nam_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,ind_nam_df,by="url")
return(result_df[c('search_term','Name','Ind_Alias')])
}
GetIndName("Apple-Inc",key=key)
GetIndName(c("Apple-Inc","Microsoft)",key=key)
)
GetIndName(c("Apple-Inc","Microsoft"),key=key)
repeat("apple_inc")
paste('apple_inc')
10*paste('apple_inc')
paste('apple_inc')*10
replicate("apple-inc",100)
?replicate
replicate("100,apple-inc")
replicate(100,"apple-inc")
GetIndName(c("Apple-Inc","Microsoft",replicate(100,"apple-inc")),key=key)
GetIndName <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
cb <-  function(res){
test <- res
names <- list()
if (test[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(test[["content"]])))>0){
names[["Name"]] <- jsonlite::fromJSON(rawToChar(test[["content"]]))[["name"]]
names[["Ind_Alias"]] <- jsonlite::fromJSON(rawToChar(test[["content"]]))[["alias"]]
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}else{
names[["Name"]] <- NA
names[["Ind_Alias"]] <- NA
names[["url"]] <- test[["url"]]
data <<- c(data, list(names))
}
message(paste(length(data), " of ", length(alias), " ", round(((length(data)/length(alias))*100),2), "% done","\n"))
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/Industry?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=cb, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
ind_nam_df <- bind_rows(data)
colnames(ind_nam_df) <- c("Name","Ind_Alias","url")
result_df <- dplyr::left_join(submits,ind_nam_df,by="url")
return(result_df[c('search_term','Name','Ind_Alias')])
}
GetIndName(c("Apple-Inc","Microsoft",replicate(100,"apple-inc")),key=key)
