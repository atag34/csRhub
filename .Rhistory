library(devtools)
library(csRhub)
library('csRhub')
devtools::load_all()
csRhub::csrhub_keygen("ops@heron.org","Heron100")
key <- csRhub::csrhub_keygen("ops@heron.org","Heron100")
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/lookup:",curl::curl_escape('US0378331005'),"/company?session_id=",key))
test <- jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/lookup:",curl::curl_escape('US0378331005'),"/company?session_id=",key))
tets
test
test <- csRhub::GetAlias('US0378331005',key = key)
test
results <- csRhub::GetAlias('AAPL',key = key)
print(results)
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/lookup:",curl::curl_escape(paste0('Apple inc',',microsoft'),"/company?session_id=",key))
)
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/lookup:",curl::curl_escape(paste0('Apple inc',',microsoft')),"/company?session_id=",key))
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/lookup:",curl::curl_escape('apple'),"/company?session_id=",key))
csRhub::GetAlias('apple',key=key)
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/ISIN:",curl::curl_escape('Apple-Inc'),"/company?session_id=",key))
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/ISIN?session_id=",key))
GetISIN <- function(company,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(company), " ", round(((length(data)/length(company))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=company,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(company),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df)
}
GetISIN('Apple-Inc',ley=key)
GetISIN('Apple-Inc',key=key)
GetISIN <- function(company,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(company), " ", round(((length(data)/length(company))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=company,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(company),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
GetISIN('Apple-Inc',key=key)
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(paste0('Apple-Inc',',','Apple-Inc')),"/ISIN?session_id=",key))
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(paste0('Apple-Inc',',','Apple-Inc')),"/ISIN?session_id=",key))
company_names <- c("Apple_Inc","Google-Inc")
results <- GetISIN(company=company_names,key=key)
print(results)
results <- GetISIN(company=company_names,key=key)
rm(data)
GetISIN <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(response[["content"]])))>0){
names[["Name"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["Name"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(company), " ", round(((length(data)/length(company))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
results <- GetISIN(company=company_names,key=key)
results <- GetISIN(alias=company_names,key=key)
GetISIN <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(response[["content"]])))>0){
names[["ISIN"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["ISIN"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(alias), " ", round(((length(data)/length(alias))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
results <- GetISIN(alias=company_names,key=key)
results
company_names
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple_inc'),"/ISIN?session_id=",key))
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple_Inc'),"/ISIN?session_id=",key))
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple_Inc.'),"/ISIN?session_id=",key))
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc.'),"/ISIN?session_id=",key))
jsonlite::fromJSON(paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/ISIN?session_id=",key))
company_names <- c('Apple-Inc','badname','google-inc')
results <- GetISIN(alias=company_names,key=key)
results
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 & length(jsonlite::fromJSON(rawToChar(response[["content"]])))>0){
names[["ISIN"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["ISIN"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(alias), " ", round(((length(data)/length(alias))*100),2), "% done","\n")
}
submits <- data.frame("search_term"='Apple-Inc',
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(Apple-Inc),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
submits <- data.frame("search_term"='Apple-Inc',
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('Apple-Inc'),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
submits
submits[2,] <- c('badname',paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/ISIN?session_id=",key))
submits[2,] <- c('badname',paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape('thing'),"/ISIN?session_id=",key))
submits
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
data
GetISIN <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 &
!is.null(fromJSON(rawToChar(as.raw(data[[i]][7][["content"]])))[["ISIN"]]) &
!is.na(fromJSON(rawToChar(as.raw(data[[i]][7][["content"]])))[["ISIN"]])){
names[["ISIN"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["ISIN"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(alias), " ", round(((length(data)/length(alias))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
results <- GetISIN(alias=company_names,key=key)
GetISIN <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 &
!is.null(jsonlite::fromJSON(rawToChar(as.raw(data[[i]][7][["content"]])))[["ISIN"]]) &
!is.na(jsonlite::fromJSON(rawToChar(as.raw(data[[i]][7][["content"]])))[["ISIN"]])){
names[["ISIN"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["ISIN"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(alias), " ", round(((length(data)/length(alias))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
results <- GetISIN(alias=company_names,key=key)
GetISIN <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 &
!is.null(jsonlite::fromJSON(rawToChar(as.raw(data[[1]][7][["content"]])))[["ISIN"]]) &
!is.na(jsonlite::fromJSON(rawToChar(as.raw(data[[1]][7][["content"]])))[["ISIN"]])){
names[["ISIN"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["ISIN"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(alias), " ", round(((length(data)/length(alias))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
results <- GetISIN(alias=company_names,key=key)
GetISIN <- function(alias,key){
#create a handle object
data <- list()
h <- curl::new_handle() %>%
curl::handle_setheaders("Content-Type" = "application/json") %>%
curl::handle_setform(body = jsonlite::toJSON(iris))
pool <- curl::new_pool(total_con = 4, host_con = 4)
# results only available through call back function
isin_fun <-  function(response){
names <- list()
if (response[["status_code"]]==200 &
!is.null(jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]])){
names[["ISIN"]] <- jsonlite::fromJSON(rawToChar(response[["content"]]))[["ISIN"]][1]
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
} else{
names[["ISIN"]] <- NA
names[["url"]] <- response[["url"]]
data <<- c(data, list(names))
}
cat(length(data), " of ", length(alias), " ", round(((length(data)/length(alias))*100),2), "% done","\n")
}
submits <- data.frame("search_term"=alias,
"url"=paste0("https://www.csrhub.com/api/v2/company:",curl::curl_escape(alias),"/ISIN?session_id=",key),
stringsAsFactors = FALSE)
# all scheduled requests are performed concurrently
sapply(submits$url, curl::curl_fetch_multi, done=isin_fun, pool=pool)
# This actually performs requests
out <- curl::multi_run(pool = pool)
print(out)
isin_df <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T),stringsAsFactors=FALSE)
colnames(isin_df) <- c("ISIN","url")
result_df <- dplyr::left_join(submits,isin_df,by="url")
return(result_df[,c('search_term',"ISIN")])
}
results <- GetISIN(alias=company_names,key=key)
results
